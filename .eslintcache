[{"C:\\Users\\moira\\OneDrive\\Documenten\\Novi\\Frontend\\Ordina\\word-counting\\src\\reportWebVitals.js":"1","C:\\Users\\moira\\OneDrive\\Documenten\\Novi\\Frontend\\Ordina\\word-counting\\src\\App.js":"2","C:\\Users\\moira\\OneDrive\\Documenten\\Novi\\Frontend\\Ordina\\word-counting\\src\\components\\wordCount\\wordCount.js":"3","C:\\Users\\moira\\OneDrive\\Documenten\\Novi\\Frontend\\Ordina\\word-counting\\src\\index.js":"4","C:\\Users\\moira\\OneDrive\\Documenten\\Novi\\Frontend\\Ordina\\word-counting\\src\\components\\button\\button.js":"5","C:\\Users\\moira\\OneDrive\\Documenten\\Novi\\Frontend\\Ordina\\word-counting\\src\\components\\buttonWrapper\\buttonWrapper.js":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":226,"mtime":1611261190992,"results":"9","hashOfConfig":"8"},{"size":7834,"mtime":1611298542027,"results":"10","hashOfConfig":"8"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"8"},{"size":223,"mtime":1611261168145,"results":"12","hashOfConfig":"8"},{"size":179,"mtime":1611261168166,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"appqet",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\moira\\OneDrive\\Documenten\\Novi\\Frontend\\Ordina\\word-counting\\src\\reportWebVitals.js",[],["29","30"],"C:\\Users\\moira\\OneDrive\\Documenten\\Novi\\Frontend\\Ordina\\word-counting\\src\\App.js",[],"C:\\Users\\moira\\OneDrive\\Documenten\\Novi\\Frontend\\Ordina\\word-counting\\src\\components\\wordCount\\wordCount.js",["31","32"],"import React, { useState } from 'react';\nimport './wordCount.scss';\nimport { Button } from \"../button/button\";\nimport { ButtonWrapper } from \"../buttonWrapper/buttonWrapper\";\nimport { useForm } from 'react-hook-form';\n\nexport const WordCount = ({}) => {\n    const { register, handleSubmit, errors } = useForm();\n    const [ highestFreq, setHighestFreq ] = useState(0);\n    const [ mostFreqNWords, setMostFreqNWords ] = useState(\"0\");\n    const [ specifiedWord, setSpecifiedWord ] = useState(\"\");\n    const [ specifiedWordFreq, setSpecifiedWordFreq ] = useState(\"0\");\n    const [ demoText, setDemoText ] = useState(\"\");\n    const [ cloneKeys, setCloneKeys ] = useState([]);\n    const [ cloneValues, setCloneValues ] = useState([]);\n    const [ checkWord, setCheckWord ] = useState(\"\");\n\n    let frequency = {};\n    let keys = [];\n    let values = [];\n\n    function onSucces(data) {\n        // convert input data to array of words\n        let allWords= getWords(data);\n\n        // convert words to lowercase\n        let allLowerCaseWords = setToLowerCase(allWords);\n\n        // calculate frequency of words, creates a value and key structure\n        getFrequency(allLowerCaseWords);\n\n        // sort keys alphabetically\n        keys.sort();\n\n        // sort frequency from high to low\n        sortFrequencyFromHighToLow(keys, frequency);\n\n        // assign values to array and return values\n        getValues(keys);\n\n        // calculate highest frequency\n        getHighestFrequency(values);\n\n        // calculate most frequent n words\n        calculateMostFrequentNWordsToString();\n\n        // create a clone of keys so calculateFrequencyForWord can access them\n        setCloneKeys([...keys]);\n\n        // create a clone of values so calculateFrequencyForWord can access them\n        setCloneValues([...values]);\n\n        // reset specified word\n        setSpecifiedWord(\"\");\n    }\n\n    const onError = (errorList) => {\n        console.log(errorList)\n    }\n\n    function getWords(data) {\n        let words = data.textArea.split(/[0-9\\W+]/g);\n        return words.filter(e =>  e);\n    }\n\n    function setToLowerCase(words) {\n        let lowerCaseWords = [];\n            for (let i=0; i <  words.length; i++ ) {\n                lowerCaseWords.push(words[i].toLowerCase());\n            }\n        return lowerCaseWords;\n    }\n\n    function getFrequency(words){\n        for (let i = 0; i < words.length; i++) {\n            let word = words[i];\n            if (frequency[word] === undefined) {\n                frequency[word] = 1;\n                keys.push(word);\n            } else {\n                frequency[word] ++;\n            }\n        }\n        return frequency;\n    }\n\n    function sortFrequencyFromHighToLow(keys, frequency) {\n        keys.sort(function (a,b) {\n            let frequencyA = frequency[a];\n            let frequencyB = frequency[b];\n            return frequencyB - frequencyA;\n        });\n    }\n\n    function getValues(words) {\n        for (let i = 0; i < keys.length; i++) {\n            let key = keys[i];\n            values.push(frequency[key]);\n        }\n        return values;\n    }\n\n    function getHighestFrequency(values) {\n        let maxValue = Math.max(...values);\n        setHighestFreq(maxValue);\n    }\n\n    // This function is not called to pass data to the browser interface.\n    // It demonstrates the output asked for in the technical test description.\n    function calculateMostFrequentNWords() {\n        let frequent = [];\n        let first = [keys[0], values[0]];\n        let second = [keys[1], values[1]];\n        let third = [keys[2], values[2]];\n        frequent.push(first)\n        frequent.push(second);\n        frequent.push(third);\n        return frequent;\n    }\n\n    function calculateMostFrequentNWordsToString() {\n        let str = \"\";\n            for (let i = 0; i < keys.length; i++ ) {\n                if (keys.length >= 3 ) {\n                    str = `${keys[0]}, ${values[0]} / ${keys[1]}, ${values[1]} / ${keys[2]}, ${values[2]}`;\n                }\n                else if (keys.length === 2) {\n                    str =`${keys[0]}, ${values[0]} / ${keys[1]}, ${values[1]}`;\n                }\n                else if (keys.length === 1) {\n                    str = `${keys[0]}, ${values[0]}`;\n                }\n        }\n        setMostFreqNWords(str);\n    }\n\n    function calculateFrequencyForWord(data){\n        let word = data.toLowerCase();\n        if (cloneKeys.includes(word)) {\n            let index = cloneKeys.indexOf(word);\n            setSpecifiedWordFreq(cloneValues[index]);\n            setCheckWord(\"\");\n        } else if (word === \"\") {\n            setCheckWord(\"\");\n        } else {\n            setCheckWord(\"Input text doesn't contain specified word, try again\");\n            setSpecifiedWordFreq(0);\n        }\n    }\n\n    function onReset(){\n        setHighestFreq(0);\n        setMostFreqNWords(\"0\");\n        setDemoText(\"\");\n        setSpecifiedWord(\"\");\n    }\n\n    function useDemoText() {\n       setDemoText(\"This is demo text with numbers 123456, dividers, special characters, @#$%^^&*(), quotes '' and more! It also contains several words writen with a different combination of capital letters: HALLO, hallo, hAllO. You can add or adjust this text. Or press 'reset' to type your text. Have fun!\");\n    }\n\n    return (\n        <div>\n            <form className=\"word-count\" onSubmit={handleSubmit(onSucces, onError)}>\n                <ButtonWrapper>\n                    <Button id=\"demo-button\" className=\"button button-secondary\" type=\"button\" onClick={useDemoText}>Use Demo Text</Button>\n                    <Button id=\"reset-button\" className=\"button button-secondary\" type=\"reset\" onClick={onReset}>Reset</Button>\n                </ButtonWrapper>\n                <textarea\n                    id=\"text-area\"\n                    name=\"textArea\"\n                    placeholder=\"Type your text here ... \"\n                    rows=\"15\"\n                    cols=\"60\"\n                    value={demoText}\n                    onChange={(e) => setDemoText(e.target.value)}\n                    ref={ register({\n                            required: true,\n                        })}\n                ></textarea>\n                 {errors.textArea?.type === \"required\" && <p className=\"error-message\">Your input is required</p>}\n                <ButtonWrapper>\n                    <Button className=\"button button-primary\">Calculate words</Button>\n                </ButtonWrapper>\n            </form>\n            <div>\n                <ul>\n                    <li>\n                        <p id=\"highest-freq\" className=\"title\">Highest frequency:</p>\n                        <p id=\"highest-freq-answer\" className=\"answer\">{highestFreq}</p>\n                    </li>\n                    <li>\n                        <p className=\"title\">Most frequent N words: </p>\n                        <p className=\"answer\">{mostFreqNWords} </p>\n                    </li>\n                    <li>\n                        <p className=\"title\">The word</p>\n                        <input\n                            type=\"text\"\n                            id=\"specified-word\"\n                            name=\"specifiedWord\"\n                            value={specifiedWord}\n                            onChange={(e) => {\n                                setSpecifiedWord(e.target.value);\n                                calculateFrequencyForWord(e.target.value);\n                            }}\n                            placeholder=\"type word here\"\n                        ></input>\n                        <p className=\"title\">has a frequency of</p>\n                        <p className=\"answer\">{specifiedWordFreq}</p>\n                    </li>\n                    <p className=\"hint-message\">{checkWord}</p>\n                </ul>\n            </div>\n        </div>\n    );\n};\n","C:\\Users\\moira\\OneDrive\\Documenten\\Novi\\Frontend\\Ordina\\word-counting\\src\\index.js",[],"C:\\Users\\moira\\OneDrive\\Documenten\\Novi\\Frontend\\Ordina\\word-counting\\src\\components\\button\\button.js",[],"C:\\Users\\moira\\OneDrive\\Documenten\\Novi\\Frontend\\Ordina\\word-counting\\src\\components\\buttonWrapper\\buttonWrapper.js",[],["33","34"],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":7,"column":27,"nodeType":"41","messageId":"42","endLine":7,"endColumn":29},{"ruleId":"43","severity":1,"message":"44","line":110,"column":14,"nodeType":"45","messageId":"46","endLine":110,"endColumn":41},{"ruleId":"35","replacedBy":"47"},{"ruleId":"37","replacedBy":"48"},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","no-unused-vars","'calculateMostFrequentNWords' is defined but never used.","Identifier","unusedVar",["49"],["50"],"no-global-assign","no-unsafe-negation"]